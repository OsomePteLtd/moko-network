import kotlinx.serialization.SerialName
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
* {{{description}}}
* Values: {{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}, unknown_value
*/
@Serializable(with = {{classname}}Serializer::class)
{{#nonPublicApi}}internal {{/nonPublicApi}}enum class {{classname}}() {
{{#allowableValues}}{{#enumVars}}
    @SerialName({{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}})
    {{name}},
{{/enumVars}}{{/allowableValues}}
    @SerialName("unknown_value")
    UNKNOWN_VALUE;

    override fun toString() = raw()
    fun raw() = this::class.java.getField(name).getAnnotation(SerialName::class.java)?.value.orEmpty()
}

val {{classname}}.serialName: String
    get() = this::class.java.getField(this.name).getAnnotation(SerialName::class.java)!!.value

{{#nonPublicApi}}internal {{/nonPublicApi}}object {{classname}}Serializer:KSerializer<{{classname}}> {
    private val className = this::class.qualifiedName!!
    private val lookup = {{classname}}.values().associateBy({ it }, { it.serialName })
    private val revLookup = {{classname}}.values().associateBy { it.serialName }
    override val descriptor = PrimitiveSerialDescriptor(className, PrimitiveKind.STRING)
    override fun serialize(encoder: Encoder, value: {{classname}}) = encoder.encodeString(lookup.getValue(value))
    override fun deserialize(decoder: Decoder) = revLookup.getOrElse(decoder.decodeString()) { {{classname}}.UNKNOWN_VALUE }
}
